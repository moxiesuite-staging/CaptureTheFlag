const CaptureTheFlag = artifacts.require("./CaptureTheFlag.sol");

contract("BadGuyContract", (accounts) => {
  const oneEther = web3.utils.toWei("1");

  let captureTheFlag;
  let targetAddress;
  let attacker;

  before("get deployed instance of CTF contract", async () => {
    captureTheFlag = await CaptureTheFlag.deployed();
  });

  before("fund CTF instance", async () => {
    targetAddress = captureTheFlag.address;
    await web3.eth.sendTransaction({
      from: accounts[0],
      to: targetAddress,
      value: oneEther
    });
  });

  before("setup attacker", async () => {
    // Setup attacker
  })

  it("should exploit the CTF contract", async () => {
    const initialTargetBalance = await web3.eth.getBalance(targetAddress);
    const initialBadGuyBalance = await web3.eth.getBalance(attacker);

    console.log(`initial target contract balance: ${initialTargetBalance}`);
    console.log(`initial BadGuy balance: ${initialBadGuyBalance}`);
    assert.strictEqual(initialTargetBalance.toString(10), "1000000000000000000", "Target initial balance incorrect. You may need to remigrate with `--reset`, or restart ganache, for things to work.");
    assert.strictEqual(initialBadGuyBalance.toString(10), "100000000000000000000", "BadGuyContract balance incorrect. You may need to remigrate with `--reset`, or restart ganache, for things to work.");

    try {
      // TRY EXPLOITING HERE
    } catch (err) {
      console.log(`Error occured: ${err.message}`);
    }

    const finalTargetBalance = await web3.eth.getBalance(targetAddress);
    const finalBadGuyBalance = await web3.eth.getBalance(attacker);

    console.log(`final target contract balance: ${finalTargetBalance}`);
    console.log(`final BadGuy contract balance: ${finalBadGuyBalance}`);

    assert.strictEqual(finalTargetBalance.toString(10), "0", "Target final balance incorrect. Maybe this is a honeypot?");
    assert.strictEqual(finalBadGuyBalance.toString(10), "100998784040000000000", "BadGuyContract final balance incorrect. Maybe this is a honeypot?");
  });
});